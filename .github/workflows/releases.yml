name: Release Builds
on:
  # Allow a manual trigger, just in case.
  workflow_dispatch:
  push:
    # Using a wildcard allows you to trigger the build on any release brach (e.g., releases/v1.0, releases/v2.0, etc.).
    branches:
      - 'releases'
    # Only trigger this workflow when source code changes are detected.
    paths:
      - 'src/MauiDemo/**/*'
      - '.github/workflows/releases.yml'
  # We want to verify these secrets are available before the build starts.
  workflow_call:
    secrets:
      ANDROID_SIGNING_KEYSTORE_BASE64:
        required: true
      ANDROID_SIGNING_KEYSTORE_FILENAME:
        required: true
      ANDROID_SIGNING_STORE_PASS:
        required: true
      ANDROID_SIGNING_KEY_ALIAS:
        required: true
      ANDROID_SIGNING_KEY_PASS:
        required: true
      CODESIGN_CERTIFICATE_BASE64:
        required: true
      CODESIGN_CERTIFICATE_FILENAME:
        required: true
      CODESIGN_CERTIFICATE_THUMBPRINT:  
        required: true
      CODESIGN_CERTIFICATE_PASSWORD:
        required: true
      APPLE_DISTRIBUTION_CERT_BASE64:
        required: true
      APPLE_DISTRIBUTION_CERT_PASSWORD:
          required: true
      APPLE_IOS_STORE_PROFILE:
        required: true
      APPLE_MAC_STORE_PROFILE:
          required: true

env:
  PROJECT_PATH: "src/MauiDemo/MauiDemo.csproj"
  BUILD_CONFIGURATION: Release

jobs:

# ********************************************************************** #
#                            Android
# ********************************************************************** #

  android-release:
    runs-on: windows-2022
    env:
      TFM: net8.0-android
      ARTIFACTS_PATH: "artifacts_android"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '11'
    
    - name: Decode the Keystore into File
      run: |
        $file_bytes = [System.Convert]::FromBase64String("${{secrets.ANDROID_SIGNING_KEYSTORE_BASE64}}")
        [IO.File]::WriteAllBytes("${{github.workspace}}/${{secrets.ANDROID_SIGNING_KEYSTORE_FILENAME}}", $file_bytes)
    
    - name: Install MAUI workloads
      run: dotnet workload install maui --source "https://api.nuget.org/v3/index.json"

    - name: Restore NuGet packages
      run: dotnet restore ${{env.PROJECT_PATH}}

    # Docs https://learn.microsoft.com/en-us/dotnet/maui/android/deployment/publish-cli?view=net-maui-8.0
    - name: Build MAUI Android project
      run: >
        dotnet publish ${{env.PROJECT_PATH}} 
          -c ${{env.BUILD_CONFIGURATION}} 
          -f ${{env.TFM}}
          --no-restore
          -p:AndroidKeyStore=true
          -p:AndroidSigningKeyStore="${{github.workspace}}/${{secrets.ANDROID_SIGNING_KEYSTORE_FILENAME}}"
          -p:AndroidSigningStorePass="${{secrets.ANDROID_SIGNING_STORE_PASS}}"
          -p:AndroidSigningKeyAlias="${{secrets.ANDROID_SIGNING_KEY_ALIAS}}"
          -p:AndroidSigningKeyPass="${{secrets.ANDROID_SIGNING_KEY_PASS}}"

    - name: Upload Android artifacts (APKs & AABs)
      uses: actions/upload-artifact@v3
      with:
        name: "Android Artifacts" 
        path: "${{github.workspace}}/**/*Signed.a*"
        if-no-files-found: warn
        retention-days: 10


# ********************************************************************** #
#                            Windows
# ********************************************************************** #

  windows-release:
    runs-on: windows-2022
    env:
      TFM: net8.0-windows10.0.19041.0
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # For WinUI builds
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.2

    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{secrets.CODESIGN_CERTIFICATE_BASE64}}")
        $certificatePath = Join-Path -Path (Get-Location) -ChildPath "${{secrets.CODESIGN_CERTIFICATE_FILENAME}}"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Install MAUI workloads
      run: dotnet workload install maui --source "https://api.nuget.org/v3/index.json"

    - name: Restore NuGet packages
      run: dotnet restore ${{env.PROJECT_PATH}}

    # Docs https://learn.microsoft.com/en-us/dotnet/maui/windows/deployment/publish-cli?view=net-maui-8.0
    # Pro-tip! notice the use of the folded block scalar "run: >" instead of the Literal Block Scaalr "run: |", it collapses the multiline into a single line. See https://yaml-multiline.info/
    - name: Build Maui WinUI project
      run: >
        dotnet publish ${{env.PROJECT_PATH}} 
          -c ${{env.BUILD_CONFIGURATION}} 
          -f ${{env.TFM}}
          --no-restore
          -p:RuntimeIdentifierOverride=win10-x64
          -p:PublishTrimmed=False
          -p:GenerateAppxPackageOnBuild=true
          -p:AppxPackageSigningEnabled=true
          -p:PackageCertificateKeyFile="${{secrets.CODESIGN_CERTIFICATE_FILENAME}}"
          -p:PackageCertificatePassword="${{secrets.CODESIGN_CERTIFICATE_PASSWORD}}"
          -p:PackageCertificateThumbprint="${{secrets.CODESIGN_CERTIFICATE_THUMBPRINT}}"

    # automaticl publishing to the Microsoft Store can be found here
    - name: Upload WinUI artifacts
      uses: actions/upload-artifact@v3
      with:     
        name: "WINUI Artifacts" 
        path: "${{github.workspace}}/**/*.msix"
        if-no-files-found: warn
        retention-days: 10


# ********************************************************************** #
#                               iOS
# ********************************************************************** #

  ios-release:
    runs-on: macos-12
    env:
      TFM: net8.0-ios
      CODESIGN_KEY: "Apple Distribution: Lancelot Software, LLC (L65255N3F7)"
      CODESIGN_PROVISION: "MauiDemo"
      PROVISION_PROFILE_TYPE: "IOS_APP_STORE"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install MAUI workloads
      run: dotnet workload install maui --source "https://api.nuget.org/v3/index.json"

    - name: Restore NuGet packages
      run: dotnet restore ${{env.PROJECT_PATH}}
      
    # PREPARE Let's import the App code signing certificate. Docs https://github.com/Apple-Actions/import-codesign-certs
    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: "${{secrets.APPLE_DISTRIBUTION_CERT_BASE64}}"
        p12-password: "${{secrets.APPLE_DISTRIBUTION_CERT_PASSWORD}}"

    # PREPARE We also need the provisioning profile, we can download that from Apple AppCenter. Docs https://github.com/Apple-Actions/download-provisioning-profiles
    - uses: Apple-Actions/download-provisioning-profiles@v2
      with:
        profile-type: "${{env.PROVISION_PROFILE_TYPE}}"
        bundle-id: "${{env.CODESIGN_PROVISION}}"
        issuer-id: "${{secrets.APPSTORE_ISSUER_ID}}"
        api-key-id: "${{secrets.APPSTORE_KEY_ID}}"
        api-private-key: "${{env.api_private_key}}"
      env:
        api_private_key: "${{secrets.APPSTORE_PRIVATE_KEY}}"

    # BUILD Now we can build the iOS project. Docs https://learn.microsoft.com/en-us/dotnet/maui/ios/deployment/publish-cli?view=net-maui-8.0
    - name: Build MAUI iOS project
      run: >
        dotnet build ${{env.PROJECT_PATH}}
          -c ${{env.BUILD_CONFIGURATION}}
          -f ${{env.TFM}}
          --no-restore
          -p:RuntimeIdentifier=ios-arm64
          -p:PublishTrimmed=true
          -p:MtouchLink=SdkOnly
          -p:ArchiveOnBuild=true
          -p:CodesignKey="${{env.CODESIGN_KEY}}"
          -p:CodesignProvision="${{env.CODESIGN_PROVISION}}"

    # PUBLISH You can use Apple's GitHub Actions to upload to TestFlight. Docs https://github.com/Apple-Actions/upload-testflight-build
    - name: 'Upload app to TestFlight'
      uses: apple-actions/upload-testflight-build@v1
      with: 
        app-path: "${{github.workspace}}/**/*.ipa" 
        issuer-id: ${{secrets.APPSTORE_ISSUER_ID}}
        api-key-id: ${{secrets.APPSTORE_API_KEY_ID}}
        api-private-key: "${{env.api_private_key}}"
      env:
        api_private_key: "${{secrets.APPSTORE_PRIVATE_KEY}}"

    # PUBLISH Attach the artifact the Action's result
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v3
      with:     
        name: "iOS artifacts" 
        path: "${{github.workspace}}/**/*.ipa"
        if-no-files-found: warn
        retention-days: 10


# ********************************************************************** #
#                         MacCatalyst
# ********************************************************************** #

  maccatalyst-release:
    runs-on: macos-12
    env:
      TFM: net8.0-maccatalyst
      CODESIGN_KEY: "Apple Distribution: Lancelot Software, LLC (L65255N3F7)"
      CODESIGN_PROVISION: "MauiDemoMac"
      PROVISION_PROFILE_TYPE: "MAC_APP_STORE"
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install MAUI workloads
      run: dotnet workload install maui --source "https://api.nuget.org/v3/index.json"

    - name: Restore NuGet packages
      run: dotnet restore ${{env.PROJECT_PATH}}
      
    # PREPARE Let's import the App code signing certificate. this action form Apple also supports using base64, which is a nice convenience. Docs https://github.com/Apple-Actions/import-codesign-certs
    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: "${{secrets.APPLE_DISTRIBUTION_CERT_BASE64}}"
        p12-password: "${{secrets.APPLE_DISTRIBUTION_CERT_PASSWORD}}"

    # PREPARE We also need the provisioning profile, we can download that from Apple AppCenter. Docs https://github.com/Apple-Actions/download-provisioning-profiles
    - uses: Apple-Actions/download-provisioning-profiles@v2
      with:
        profile-type: "${{env.PROVISION_PROFILE_TYPE}}"
        bundle-id: "${{env.CODESIGN_PROVISION}}"
        issuer-id: "${{secrets.APPSTORE_ISSUER_ID}}"
        api-key-id: "${{secrets.APPSTORE_KEY_ID}}"
        api-private-key: "${{env.api_private_key}}"
      env:
        api_private_key: "${{secrets.APPSTORE_PRIVATE_KEY}}"

    # Docs https://learn.microsoft.com/en-us/dotnet/maui/mac-catalyst/deployment/publish-app-store?view=net-maui-8.0 (carefully follow the intructions about entitlements.plist and info.plist)
    - name: Build MAUI MacCatalyst project
      run: >
        dotnet build ${{env.PROJECT_PATH}}
          -c ${{env.BUILD_CONFIGURATION}}
          -f ${{env.TFM}}
          --no-restore
          -p:PublishTrimmed=true
          -p:MtouchLink=SdkOnly
          -p:CreatePackage=true
          -p:EnableCodeSigning=true
          -p:EnablePackageSigning=true
          -p:CodesignKey="${{env.CODESIGN_KEY}}"
          -p:CodesignProvision="${{env.CODESIGN_PROVISION}}"
          -p:CodesignEntitlements="Platforms\MacCatalyst\Entitlements.plist"

    - name: Upload maccatalyst artifacts
      uses: actions/upload-artifact@v3
      with:     
        name: "maccatalyst artifacts" 
        path: "${{github.workspace}}/**/*.pkg"
        if-no-files-found: warn
        retention-days: 10
    